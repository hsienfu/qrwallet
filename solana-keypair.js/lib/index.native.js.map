{"version":3,"file":"index.native.js","sources":["../src/utils/borsh-schema.ts","../src/publickey.ts","../src/keypair.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","export * from './keypair';\nexport * from './publickey';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["Struct","constructor","properties","Object","assign","encode","Buffer","from","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","length","Error","BN","byteLength","equals","publicKey","eq","toBase58","toBytes","toJSON","toBuffer","b","toArrayLike","zeroPad","alloc","copy","toString","default","set","kind","fields","Keypair","keypair","_keypair","nacl","sign","keyPair","generate","fromSecretKey","secretKey","options","skipValidation","encoder","TextEncoder","signData","signature","detached","verify","fromSeed","seed","LAMPORTS_PER_SOL"],"mappings":"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"}